``
import React, { useState, useEffect } from "react";

const ProductsList = () => {
  const [products, setProducts] = useState([]);
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const limit = 10; // Number of items per page

  // Fetch products from the API
  const fetchProducts = async (currentPage) => {
    try {
      const response = await fetch(
        `http://localhost:5000/api/products?page=${currentPage}&limit=${limit}`
      );
      const data = await response.json();

      setProducts(data.data);
      setTotalPages(Math.ceil(data.total / limit));
    } catch (error) {
      console.error("Error fetching products:", error);
    }
  };

  // Calculate the range of visible page numbers (only 5 at a time)
  const getVisiblePages = () => {
    const totalPageNumbersToShow = 5;
    const startPage = Math.max(
      1,
      page - Math.floor(totalPageNumbersToShow / 2)
    );
    const endPage = Math.min(totalPages, startPage + totalPageNumbersToShow - 1);

    const pages = [];
    for (let i = startPage; i <= endPage; i++) {
      pages.push(i);
    }
    return pages;
  };

  // Handle page change
  const handlePageChange = (newPage) => {
    setPage(newPage);
    fetchProducts(newPage);
  };

  // Fetch data when the component mounts or the page changes
  useEffect(() => {
    fetchProducts(page);
  }, [page]);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Products</h1>
      {/* Products List */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
        {products.map((product) => (
          <div
            key={product.id}
            className="p-4 border rounded shadow hover:shadow-md transition"
          >
            <h2 className="font-semibold text-lg">{product.name}</h2>
            <p className="text-gray-500">{product.description}</p>
            <p className="text-blue-500 font-bold">${product.price}</p>
          </div>
        ))}
      </div>

      {/* Pagination */}
      <div className="mt-6 flex justify-center space-x-2">
        {/* Previous Button */}
        <button
          className={`px-4 py-2 border rounded ${
            page === 1
              ? "bg-gray-200 text-gray-500 cursor-not-allowed"
              : "bg-white hover:bg-gray-100"
          }`}
          disabled={page === 1}
          onClick={() => handlePageChange(page - 1)}
        >
          Previous
        </button>

        {/* Dynamic Page Numbers */}
        {getVisiblePages().map((pageNumber) => (
          <button
            key={pageNumber}
            className={`px-4 py-2 border rounded ${
              pageNumber === page
                ? "bg-blue-500 text-white"
                : "bg-white hover:bg-gray-100"
            }`}
            onClick={() => handlePageChange(pageNumber)}
          >
            {pageNumber}
          </button>
        ))}

        {/* Next Button */}
        <button
          className={`px-4 py-2 border rounded ${
            page === totalPages
              ? "bg-gray-200 text-gray-500 cursor-not-allowed"
              : "bg-white hover:bg-gray-100"
          }`}
          disabled={page === totalPages}
          onClick={() => handlePageChange(page + 1)}
        >
          Next
        </button>
      </div>
    </div>
  );
};

export default ProductsList;

``
